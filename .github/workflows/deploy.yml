# filepath: d:\Github\Brainforest\sap\.github\workflows\deploy.yml
name: Deploy Backend to VM

on:
  push:
    branches:
      - main # Or your deployment branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest # Or lock to a specific version

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build project
        run: bun run build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            bun.lockb
            ecosystem.config.js # Add ecosystem config file to artifact
            # Add any other files needed for production (e.g., .env.production, static assets)

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: Production # Add this line to target the Production environment
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./deploy_package # Download to a temporary directory

      - name: List downloaded artifact contents # New step
        run: ls -la ./deploy_package

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VM # Renamed - Only ensures directory exists now
        run: |
          echo "Ensuring deployment directory exists on VM..."
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }}"

      - name: Sync files and Restart application via PM2 # Renamed and modified
        run: |
          echo "Syncing files via rsync..."
          rsync -avz --delete ./deploy_package/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}/

          echo "Running commands on VM..."
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            echo "Ensuring rsync is installed..."
            sudo apt-get update && sudo apt-get install -y rsync

            echo "Changing directory to ${{ secrets.DEPLOY_PATH }}"
            cd ${{ secrets.DEPLOY_PATH }} || exit 1 # Exit if cd fails

            echo "Listing files in current directory:"
            ls -la # List files to verify ecosystem.config.js is present

            # Install production dependencies directly on the VM
            echo "Installing production dependencies..."
            bun install --production --frozen-lockfile

            # Start or restart the application using PM2 and the ecosystem file
            echo "Starting/Restarting application with PM2..."
            /usr/local/bin/pm2 startOrRestart ecosystem.config.js --env production
            /usr/local/bin/pm2 save # Save the process list for resurrection on reboot
            echo "Deployment complete. Application managed by PM2."
          EOF
