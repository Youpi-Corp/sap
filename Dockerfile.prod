# Production Dockerfile for Backend
FROM node:20-alpine AS builder

# Install build dependencies and security updates
RUN apk update && apk upgrade && apk add --no-cache \
    git \
    curl \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files
COPY package.json bun.lock ./

# Install Bun and dependencies
RUN npm install -g bun
RUN bun install --frozen-lockfile --production

# Copy source code
COPY . .

# Production runtime stage
FROM node:20-alpine

# Install runtime dependencies and security updates
RUN apk update && apk upgrade && apk add --no-cache \
    postgresql-client \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create app user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -G appgroup

# Install Bun
RUN npm install -g bun

WORKDIR /app

# Copy application from builder
COPY --from=builder /app/ ./

# Copy production entrypoint
COPY docker-entrypoint.prod.sh ./docker-entrypoint.sh

# Set proper permissions
RUN chmod +x ./docker-entrypoint.sh && \
    sed -i 's/\r$//' ./docker-entrypoint.sh && \
    chown -R appuser:appgroup /app

# Create logs directory
RUN mkdir -p /app/logs && chown appuser:appgroup /app/logs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/info/alive || exit 1

# Security: Run as non-root user
USER appuser

EXPOSE 8080

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["./docker-entrypoint.sh"]
